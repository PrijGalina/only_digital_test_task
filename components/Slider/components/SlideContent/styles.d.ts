export declare const StyledSwiper: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components").FastOmit<import("react").RefAttributes<import("swiper/react").SwiperRef> & Omit<import("react").HTMLAttributes<HTMLElement>, "onKeyPress" | "onProgress" | "onClick" | "onDoubleClick" | "onTouchEnd" | "onTouchMove" | "onTouchStart" | "onScroll" | "onTransitionEnd" | "onResize"> & import("swiper/types").SwiperOptions & {
    tag?: string;
    wrapperTag?: string;
    onSwiper?: (swiper: import("swiper/types").Swiper) => void;
    onAutoplayStart?: (swiper: import("swiper/types").Swiper) => void;
    onAutoplayStop?: (swiper: import("swiper/types").Swiper) => void;
    onAutoplayPause?: (swiper: import("swiper/types").Swiper) => void;
    onAutoplayResume?: (swiper: import("swiper/types").Swiper) => void;
    onAutoplayTimeLeft?: (swiper: import("swiper/types").Swiper, timeLeft: number, percentage: number) => void;
    onAutoplay?: (swiper: import("swiper/types").Swiper) => void;
    onHashChange?: (swiper: import("swiper/types").Swiper) => void;
    onHashSet?: (swiper: import("swiper/types").Swiper) => void;
    onKeyPress?: (swiper: import("swiper/types").Swiper, keyCode: string) => void;
    onNavigationHide?: (swiper: import("swiper/types").Swiper) => void;
    onNavigationShow?: (swiper: import("swiper/types").Swiper) => void;
    onNavigationPrev?: (swiper: import("swiper/types").Swiper) => void;
    onNavigationNext?: (swiper: import("swiper/types").Swiper) => void;
    onScroll?: (swiper: import("swiper/types").Swiper, event: WheelEvent) => void;
    onScrollbarDragStart?: (swiper: import("swiper/types").Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void;
    onScrollbarDragMove?: (swiper: import("swiper/types").Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void;
    onScrollbarDragEnd?: (swiper: import("swiper/types").Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void;
    onPaginationRender?: (swiper: import("swiper/types").Swiper, paginationEl: HTMLElement) => void;
    onPaginationUpdate?: (swiper: import("swiper/types").Swiper, paginationEl: HTMLElement) => void;
    onPaginationHide?: (swiper: import("swiper/types").Swiper) => void;
    onPaginationShow?: (swiper: import("swiper/types").Swiper) => void;
    onZoomChange?: (swiper: import("swiper/types").Swiper, scale: number, imageEl: HTMLElement, slideEl: HTMLElement) => void;
    onInit?: (swiper: import("swiper/types").Swiper) => any;
    onBeforeDestroy?: (swiper: import("swiper/types").Swiper) => void;
    onSlidesUpdated?: (swiper: import("swiper/types").Swiper) => void;
    onSlideChange?: (swiper: import("swiper/types").Swiper) => void;
    onSlideChangeTransitionStart?: (swiper: import("swiper/types").Swiper) => void;
    onSlideChangeTransitionEnd?: (swiper: import("swiper/types").Swiper) => void;
    onSlideNextTransitionStart?: (swiper: import("swiper/types").Swiper) => void;
    onSlideNextTransitionEnd?: (swiper: import("swiper/types").Swiper) => void;
    onSlidePrevTransitionStart?: (swiper: import("swiper/types").Swiper) => void;
    onSlidePrevTransitionEnd?: (swiper: import("swiper/types").Swiper) => void;
    onTransitionStart?: (swiper: import("swiper/types").Swiper) => void;
    onTransitionEnd?: (swiper: import("swiper/types").Swiper) => void;
    onTouchStart?: (swiper: import("swiper/types").Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void;
    onTouchMove?: (swiper: import("swiper/types").Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void;
    onTouchMoveOpposite?: (swiper: import("swiper/types").Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void;
    onSliderMove?: (swiper: import("swiper/types").Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void;
    onTouchEnd?: (swiper: import("swiper/types").Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void;
    onClick?: (swiper: import("swiper/types").Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void;
    onTap?: (swiper: import("swiper/types").Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void;
    onDoubleTap?: (swiper: import("swiper/types").Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void;
    onProgress?: (swiper: import("swiper/types").Swiper, progress: number) => void;
    onReachBeginning?: (swiper: import("swiper/types").Swiper) => void;
    onReachEnd?: (swiper: import("swiper/types").Swiper) => void;
    onToEdge?: (swiper: import("swiper/types").Swiper) => void;
    onFromEdge?: (swiper: import("swiper/types").Swiper) => void;
    onSetTranslate?: (swiper: import("swiper/types").Swiper, translate: number) => void;
    onSetTransition?: (swiper: import("swiper/types").Swiper, transition: number) => void;
    onResize?: (swiper: import("swiper/types").Swiper) => void;
    onObserverUpdate?: (swiper: import("swiper/types").Swiper) => void;
    onBeforeLoopFix?: (swiper: import("swiper/types").Swiper) => void;
    onLoopFix?: (swiper: import("swiper/types").Swiper) => void;
    onBreakpoint?: (swiper: import("swiper/types").Swiper, breakpointParams: import("swiper/types").SwiperOptions) => void;
    _beforeBreakpoint?: (swiper: import("swiper/types").Swiper, breakpointParams: import("swiper/types").SwiperOptions) => void;
    _containerClasses?: (swiper: import("swiper/types").Swiper, classNames: string) => void;
    _slideClass?: (swiper: import("swiper/types").Swiper, slideEl: HTMLElement, classNames: string) => void;
    _slideClasses?: (swiper: import("swiper/types").Swiper, slides: {
        slideEl: HTMLElement;
        classNames: string;
        index: number;
    }[]) => void;
    _swiper?: (swiper: import("swiper/types").Swiper) => void;
    _freeModeNoMomentumRelease?: (swiper: import("swiper/types").Swiper) => void;
    onActiveIndexChange?: (swiper: import("swiper/types").Swiper) => void;
    onSnapIndexChange?: (swiper: import("swiper/types").Swiper) => void;
    onRealIndexChange?: (swiper: import("swiper/types").Swiper) => void;
    onAfterInit?: (swiper: import("swiper/types").Swiper) => void;
    onBeforeInit?: (swiper: import("swiper/types").Swiper) => void;
    onBeforeResize?: (swiper: import("swiper/types").Swiper) => void;
    onBeforeSlideChangeStart?: (swiper: import("swiper/types").Swiper) => void;
    onBeforeTransitionStart?: (swiper: import("swiper/types").Swiper, speed: number, internal: any) => void;
    onChangeDirection?: (swiper: import("swiper/types").Swiper) => void;
    onDoubleClick?: (swiper: import("swiper/types").Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void;
    onDestroy?: (swiper: import("swiper/types").Swiper) => void;
    onMomentumBounce?: (swiper: import("swiper/types").Swiper) => void;
    onOrientationchange?: (swiper: import("swiper/types").Swiper) => void;
    onSlideResetTransitionStart?: (swiper: import("swiper/types").Swiper) => void;
    onSlideResetTransitionEnd?: (swiper: import("swiper/types").Swiper) => void;
    onSliderFirstMove?: (swiper: import("swiper/types").Swiper, event: TouchEvent) => void;
    onSlidesLengthChange?: (swiper: import("swiper/types").Swiper) => void;
    onSlidesGridLengthChange?: (swiper: import("swiper/types").Swiper) => void;
    onSnapGridLengthChange?: (swiper: import("swiper/types").Swiper) => void;
    onUpdate?: (swiper: import("swiper/types").Swiper) => void;
    onLock?: (swiper: import("swiper/types").Swiper) => void;
    onUnlock?: (swiper: import("swiper/types").Swiper) => void;
} & {
    children?: import("react").ReactNode | undefined;
}, never>> & string & Omit<import("react").FunctionComponent<import("react").RefAttributes<import("swiper/react").SwiperRef> & Omit<import("react").HTMLAttributes<HTMLElement>, "onKeyPress" | "onProgress" | "onClick" | "onDoubleClick" | "onTouchEnd" | "onTouchMove" | "onTouchStart" | "onScroll" | "onTransitionEnd" | "onResize"> & import("swiper/types").SwiperOptions & {
    tag?: string;
    wrapperTag?: string;
    onSwiper?: (swiper: import("swiper/types").Swiper) => void;
    onAutoplayStart?: (swiper: import("swiper/types").Swiper) => void;
    onAutoplayStop?: (swiper: import("swiper/types").Swiper) => void;
    onAutoplayPause?: (swiper: import("swiper/types").Swiper) => void;
    onAutoplayResume?: (swiper: import("swiper/types").Swiper) => void;
    onAutoplayTimeLeft?: (swiper: import("swiper/types").Swiper, timeLeft: number, percentage: number) => void;
    onAutoplay?: (swiper: import("swiper/types").Swiper) => void;
    onHashChange?: (swiper: import("swiper/types").Swiper) => void;
    onHashSet?: (swiper: import("swiper/types").Swiper) => void;
    onKeyPress?: (swiper: import("swiper/types").Swiper, keyCode: string) => void;
    onNavigationHide?: (swiper: import("swiper/types").Swiper) => void;
    onNavigationShow?: (swiper: import("swiper/types").Swiper) => void;
    onNavigationPrev?: (swiper: import("swiper/types").Swiper) => void;
    onNavigationNext?: (swiper: import("swiper/types").Swiper) => void;
    onScroll?: (swiper: import("swiper/types").Swiper, event: WheelEvent) => void;
    onScrollbarDragStart?: (swiper: import("swiper/types").Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void;
    onScrollbarDragMove?: (swiper: import("swiper/types").Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void;
    onScrollbarDragEnd?: (swiper: import("swiper/types").Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void;
    onPaginationRender?: (swiper: import("swiper/types").Swiper, paginationEl: HTMLElement) => void;
    onPaginationUpdate?: (swiper: import("swiper/types").Swiper, paginationEl: HTMLElement) => void;
    onPaginationHide?: (swiper: import("swiper/types").Swiper) => void;
    onPaginationShow?: (swiper: import("swiper/types").Swiper) => void;
    onZoomChange?: (swiper: import("swiper/types").Swiper, scale: number, imageEl: HTMLElement, slideEl: HTMLElement) => void;
    onInit?: (swiper: import("swiper/types").Swiper) => any;
    onBeforeDestroy?: (swiper: import("swiper/types").Swiper) => void;
    onSlidesUpdated?: (swiper: import("swiper/types").Swiper) => void;
    onSlideChange?: (swiper: import("swiper/types").Swiper) => void;
    onSlideChangeTransitionStart?: (swiper: import("swiper/types").Swiper) => void;
    onSlideChangeTransitionEnd?: (swiper: import("swiper/types").Swiper) => void;
    onSlideNextTransitionStart?: (swiper: import("swiper/types").Swiper) => void;
    onSlideNextTransitionEnd?: (swiper: import("swiper/types").Swiper) => void;
    onSlidePrevTransitionStart?: (swiper: import("swiper/types").Swiper) => void;
    onSlidePrevTransitionEnd?: (swiper: import("swiper/types").Swiper) => void;
    onTransitionStart?: (swiper: import("swiper/types").Swiper) => void;
    onTransitionEnd?: (swiper: import("swiper/types").Swiper) => void;
    onTouchStart?: (swiper: import("swiper/types").Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void;
    onTouchMove?: (swiper: import("swiper/types").Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void;
    onTouchMoveOpposite?: (swiper: import("swiper/types").Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void;
    onSliderMove?: (swiper: import("swiper/types").Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void;
    onTouchEnd?: (swiper: import("swiper/types").Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void;
    onClick?: (swiper: import("swiper/types").Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void;
    onTap?: (swiper: import("swiper/types").Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void;
    onDoubleTap?: (swiper: import("swiper/types").Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void;
    onProgress?: (swiper: import("swiper/types").Swiper, progress: number) => void;
    onReachBeginning?: (swiper: import("swiper/types").Swiper) => void;
    onReachEnd?: (swiper: import("swiper/types").Swiper) => void;
    onToEdge?: (swiper: import("swiper/types").Swiper) => void;
    onFromEdge?: (swiper: import("swiper/types").Swiper) => void;
    onSetTranslate?: (swiper: import("swiper/types").Swiper, translate: number) => void;
    onSetTransition?: (swiper: import("swiper/types").Swiper, transition: number) => void;
    onResize?: (swiper: import("swiper/types").Swiper) => void;
    onObserverUpdate?: (swiper: import("swiper/types").Swiper) => void;
    onBeforeLoopFix?: (swiper: import("swiper/types").Swiper) => void;
    onLoopFix?: (swiper: import("swiper/types").Swiper) => void;
    onBreakpoint?: (swiper: import("swiper/types").Swiper, breakpointParams: import("swiper/types").SwiperOptions) => void;
    _beforeBreakpoint?: (swiper: import("swiper/types").Swiper, breakpointParams: import("swiper/types").SwiperOptions) => void;
    _containerClasses?: (swiper: import("swiper/types").Swiper, classNames: string) => void;
    _slideClass?: (swiper: import("swiper/types").Swiper, slideEl: HTMLElement, classNames: string) => void;
    _slideClasses?: (swiper: import("swiper/types").Swiper, slides: {
        slideEl: HTMLElement;
        classNames: string;
        index: number;
    }[]) => void;
    _swiper?: (swiper: import("swiper/types").Swiper) => void;
    _freeModeNoMomentumRelease?: (swiper: import("swiper/types").Swiper) => void;
    onActiveIndexChange?: (swiper: import("swiper/types").Swiper) => void;
    onSnapIndexChange?: (swiper: import("swiper/types").Swiper) => void;
    onRealIndexChange?: (swiper: import("swiper/types").Swiper) => void;
    onAfterInit?: (swiper: import("swiper/types").Swiper) => void;
    onBeforeInit?: (swiper: import("swiper/types").Swiper) => void;
    onBeforeResize?: (swiper: import("swiper/types").Swiper) => void;
    onBeforeSlideChangeStart?: (swiper: import("swiper/types").Swiper) => void;
    onBeforeTransitionStart?: (swiper: import("swiper/types").Swiper, speed: number, internal: any) => void;
    onChangeDirection?: (swiper: import("swiper/types").Swiper) => void;
    onDoubleClick?: (swiper: import("swiper/types").Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void;
    onDestroy?: (swiper: import("swiper/types").Swiper) => void;
    onMomentumBounce?: (swiper: import("swiper/types").Swiper) => void;
    onOrientationchange?: (swiper: import("swiper/types").Swiper) => void;
    onSlideResetTransitionStart?: (swiper: import("swiper/types").Swiper) => void;
    onSlideResetTransitionEnd?: (swiper: import("swiper/types").Swiper) => void;
    onSliderFirstMove?: (swiper: import("swiper/types").Swiper, event: TouchEvent) => void;
    onSlidesLengthChange?: (swiper: import("swiper/types").Swiper) => void;
    onSlidesGridLengthChange?: (swiper: import("swiper/types").Swiper) => void;
    onSnapGridLengthChange?: (swiper: import("swiper/types").Swiper) => void;
    onUpdate?: (swiper: import("swiper/types").Swiper) => void;
    onLock?: (swiper: import("swiper/types").Swiper) => void;
    onUnlock?: (swiper: import("swiper/types").Swiper) => void;
} & {
    children?: import("react").ReactNode | undefined;
}>, keyof import("react").Component<any, {}, any>>;
export declare const Wrapper: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components").FastOmit<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, never>> & string;
export declare const PeriodWrapper: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components").FastOmit<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, never>> & string;
export declare const DateStart: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components").FastOmit<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, never>> & string;
export declare const DateEnd: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components").FastOmit<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, never>> & string;
export declare const Category: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components").FastOmit<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLParagraphElement>, HTMLParagraphElement>, never>> & string;
//# sourceMappingURL=styles.d.ts.map